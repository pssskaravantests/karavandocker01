- route:
    id: process-flow-with-exception-handling-v1
    nodePrefixId: route-001
    from:
      id: from-001
      uri: timer
      parameters:
        timerName: start?period=10000
      steps:
        - doTry:
            id: try-block-001
            doCatch:
              - id: catch-custom-exception
                exceptions:
                  - com.example.CustomProcessingException
                steps:
                  - log:
                      id: log-custom-error
                      message: "Error en el procesador Java: ${exception.message}"
                      loggingLevel: ERROR
                  - setBody:
                      id: set-error-response-001
                      expression:
                        simple:
                          id: simple-63c0
                          expression: "{ \"error\": \"Processing failed\" }"
                  - setHeader:
                      id: set-error-code-001
                      name: CamelHttpResponseCode
                      expression:
                        simple:
                          id: simple-bde4
                          expression: "500"
                  - stop:
                      id: stop-on-custom-error
              - id: catch-timeout-exception
                exceptions:
                  - java.net.SocketTimeoutException
                steps:
                  - log:
                      id: log-timeout-error
                      message: >-
                        Timeout en la primera llamada HTTPS:
                        ${exception.message}
                      loggingLevel: ERROR
                  - setBody:
                      id: set-timeout-response
                      expression:
                        simple:
                          id: simple-8c61
                          expression: "{ \"error\": \"Request timed out\" }"
                  - setHeader:
                      id: set-timeout-code
                      name: CamelHttpResponseCode
                      expression:
                        simple:
                          id: simple-5204
                          expression: "504"
                  - stop:
                      id: stop-on-timeout
              - id: catch-auth-exception
                exceptions:
                  - javax.net.ssl.SSLHandshakeException
                steps:
                  - log:
                      id: log-auth-error
                      message: >-
                        Error de autenticación en la primera llamada HTTPS:
                        ${exception.message}
                      loggingLevel: ERROR
                  - setBody:
                      id: set-auth-response
                      expression:
                        simple:
                          id: simple-6d39
                          expression: "{ \"error\": \"Authentication failed\" }"
                  - setHeader:
                      id: set-auth-code
                      name: CamelHttpResponseCode
                      expression:
                        simple:
                          id: simple-dd2d
                          expression: "401"
                  - stop:
                      id: stop-on-auth-error
            doFinally:
              id: doFinally-37e6
              log:
                id: log-finally
                message: Finalizando el bloque try/catch
                loggingLevel: INFO
            steps:
              - process:
                  id: java-processor-001
                  ref: MyCustomProcessor
              - to:
                  id: https-call-1
                  uri: https
                  parameters:
                    httpMethod: GET
                    connectionRequestTimeout: 10000
                    socketTimeout: 10000
                    httpUri: api.example.com/important-endpoint
              - doTry:
                  id: try-block-https-2
                  doCatch:
                    - id: catch-https-2-errors
                      exceptions:
                        - java.lang.Exception
                      steps:
                        - log:
                            id: log-https-2-error
                            message: >-
                              Error en la segunda llamada HTTPS (no crítica):
                              ${exception.message}
                            loggingLevel: ERROR
                  steps:
                    - to:
                        id: https-call-2
                        uri: https
                        parameters:
                          httpMethod: POST
                          connectionRequestTimeout: 5000
                          socketTimeout: 5000
                          authenticationPreemptive: true
                          httpClientConfigurer: myHttpClientConfigurer
                          httpUri: api.optional.com/secondary-endpoint
        - log:
            id: log-success
            message: Flujo completado con éxito
            loggingLevel: INFO
        - to:
            id: final-destination
            uri: mock
            parameters:
              name: result
